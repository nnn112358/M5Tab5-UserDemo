/*
 * SPDX-FileCopyrightText: 2025 M5Stack Technology CO LTD
 *
 * SPDX-License-Identifier: MIT
 */

// ハードウェア抽象化レイヤー(HAL)のESP32実装のヘッダーファイルをインクルードします。
// これにより、ESP32固有のハードウェア機能にアクセスするためのインターフェースが提供されます。
#include "hal/hal_esp32.h"

// アプリケーションフレームワークのコア機能を含むヘッダーファイルをインクルードします。
// アプリケーションの初期化、更新、終了処理などを管理します。
#include <app.h>

// HALの基本インターフェースを定義するヘッダーファイルをインクルードします。
// これにより、プラットフォーム非依存の形でハードウェアを操作できます。
#include <hal/hal.h>

// C++のスマートポインタ (std::make_uniqueなど) を使用するために、<memory>ヘッダーをインクルードします。
// リソース管理を容易にし、メモリリークを防ぐのに役立ちます。
#include <memory>

// FreeRTOSリアルタイムオペレーティングシステムの基本機能をインクルードします。
// タスク管理、セマフォ、キューなどの機能を提供します。
#include <freertos/FreeRTOS.h>

// FreeRTOSのタスク関連機能 (タスク作成、遅延など) をインクルードします。
#include <freertos/task.h>

// C言語リンケージでapp_main関数を定義します。これはESP-IDFにおけるメインエントリーポイントです。
// プログラムはここから実行を開始します。
extern "C" void app_main(void)
{
    // アプリケーション層の初期化時に使用するコールバック関数群を保持するための構造体を宣言します。
    // これにより、初期化プロセス中に特定の処理を差し込むことができます。
    app::InitCallback_t callback;

    // HAL (Hardware Abstraction Layer) 注入のためのコールバック関数をラムダ式で設定します。
    // このコールバックは、アプリケーションの初期化フローの中で呼び出され、
    // 具体的なハードウェア実装 (この場合はHalEsp32) をアプリケーションフレームワークに提供します。
    callback.onHalInjection = []() {
        // HalEsp32クラスのインスタンスを生成し、その所有権をstd::unique_ptrに委譲します。
        // hal::Inject関数を呼び出すことで、このHalEsp32インスタンスを
        // アプリケーション全体で使用されるHALのインターフェースに注入（登録）します。
        // これにより、アプリケーションコードは具体的なハードウェアの詳細を意識することなく、
        // 抽象化されたHALインターフェースを通じてハードウェアを操作できるようになります。
        hal::Inject(std::make_unique<HalEsp32>());
    };

    // アプリケーションフレームワークの初期化処理を呼び出します。
    // 上記で設定したコールバック構造体を引数として渡し、初期化プロセス中に
    // HALの注入などが行われるようにします。
    app::Init(callback);

    // アプリケーションのメインループです。
    // app::IsDone() がtrueを返す (つまり、アプリケーションが終了すべき状態になる) まで、
    // このループは継続します。
    while (!app::IsDone()) {
        // アプリケーションフレームワークの更新処理 (app::Update()) を呼び出します。
        // この中で、UIの更新、イベント処理、その他の周期的タスクが実行されます。
        app::Update();

        // FreeRTOSのvTaskDelay関数を使用して、現在のタスクを1ミリ秒間遅延させます。
        // これにより、他のタスクにCPUの実行機会を与え、システム全体の応答性を保ちます。
        // 引数の1はティック数ではなく、pdMS_TO_TICKSマクロ(FreeRTOSの便宜的マクロだがここでは直接1を指定)により適切に変換されるか、
        // もしくは1ティックを指定していることを意味します。ESP-IDFではデフォルトで1ティック1msが多いです。
        vTaskDelay(1);
    }

    // アプリケーションのメインループが終了した後、アプリケーションフレームワークの終了処理 (app::Destroy()) を呼び出します。
    // この中で、確保されたリソースの解放や、終了前の最終処理などが行われます。
    app::Destroy();
}

